
garage system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000ae4  00000b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008e  0080008e  00000ba6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000186f  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5f  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df9  00000000  00000000  00003052  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  00004128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ead  00000000  00000000  00004732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000055df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  8a:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8read>:
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_u8read+0x3a>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_u8read+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_u8read+0x16>
 25c:	4d c0       	rjmp	.+154    	; 0x2f8 <DIO_u8read+0xa6>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	39 f1       	breq	.+78     	; 0x2b0 <DIO_u8read+0x5e>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	b9 f1       	breq	.+110    	; 0x2d4 <DIO_u8read+0x82>
 266:	48 c0       	rjmp	.+144    	; 0x2f8 <DIO_u8read+0xa6>
 268:	29 b3       	in	r18, 0x19	; 25
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	06 2e       	mov	r0, r22
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_u8read+0x24>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_u8read+0x20>
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	82 23       	and	r24, r18
 27e:	93 23       	and	r25, r19
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8read+0x34>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8read+0x30>
 28a:	08 95       	ret
 28c:	26 b3       	in	r18, 0x16	; 22
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	06 2e       	mov	r0, r22
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8read+0x48>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8read+0x44>
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	82 23       	and	r24, r18
 2a2:	93 23       	and	r25, r19
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8read+0x58>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8read+0x54>
 2ae:	08 95       	ret
 2b0:	23 b3       	in	r18, 0x13	; 19
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	06 2e       	mov	r0, r22
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_u8read+0x6c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_u8read+0x68>
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	82 23       	and	r24, r18
 2c6:	93 23       	and	r25, r19
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8read+0x7c>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8read+0x78>
 2d2:	08 95       	ret
 2d4:	20 b3       	in	r18, 0x10	; 16
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	06 2e       	mov	r0, r22
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8read+0x90>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8read+0x8c>
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	82 23       	and	r24, r18
 2ea:	93 23       	and	r25, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8read+0xa0>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8read+0x9c>
 2f6:	08 95       	ret
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret

000002fc <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 2fc:	82 34       	cpi	r24, 0x42	; 66
 2fe:	59 f0       	breq	.+22     	; 0x316 <DIO_write_port+0x1a>
 300:	18 f4       	brcc	.+6      	; 0x308 <DIO_write_port+0xc>
 302:	81 34       	cpi	r24, 0x41	; 65
 304:	31 f0       	breq	.+12     	; 0x312 <DIO_write_port+0x16>
 306:	08 95       	ret
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	39 f0       	breq	.+14     	; 0x31a <DIO_write_port+0x1e>
 30c:	84 34       	cpi	r24, 0x44	; 68
 30e:	39 f0       	breq	.+14     	; 0x31e <DIO_write_port+0x22>
 310:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 312:	6b bb       	out	0x1b, r22	; 27
		break ;
 314:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 316:	68 bb       	out	0x18, r22	; 24
		break ;
 318:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 31a:	65 bb       	out	0x15, r22	; 21
		break ;
 31c:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 31e:	62 bb       	out	0x12, r22	; 18
 320:	08 95       	ret

00000322 <segment_display>:
char x;
char flag1=0,flag2=0,IR1,IR2,counter=0;
char free_slots = 99;


void segment_display(char n){
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	2a 97       	sbiw	r28, 0x0a	; 10
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
	
	const char seg[10] ={0x3f,0x06,0x5B,0x4f,0x66,0x6D,0x7D,0x07,0x7f,0x6f}; // common cathode
 336:	9a e0       	ldi	r25, 0x0A	; 10
 338:	e1 e6       	ldi	r30, 0x61	; 97
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	de 01       	movw	r26, r28
 33e:	11 96       	adiw	r26, 0x01	; 1
 340:	01 90       	ld	r0, Z+
 342:	0d 92       	st	X+, r0
 344:	9a 95       	dec	r25
 346:	e1 f7       	brne	.-8      	; 0x340 <segment_display+0x1e>
	SET_BIT(PORTC,6);
 348:	ae 9a       	sbi	0x15, 6	; 21
	PORTA = seg[n%10]<<1;    // ones
 34a:	9d ec       	ldi	r25, 0xCD	; 205
 34c:	89 9f       	mul	r24, r25
 34e:	91 2d       	mov	r25, r1
 350:	11 24       	eor	r1, r1
 352:	96 95       	lsr	r25
 354:	96 95       	lsr	r25
 356:	96 95       	lsr	r25
 358:	39 2f       	mov	r19, r25
 35a:	33 0f       	add	r19, r19
 35c:	23 2f       	mov	r18, r19
 35e:	22 0f       	add	r18, r18
 360:	22 0f       	add	r18, r18
 362:	23 0f       	add	r18, r19
 364:	82 1b       	sub	r24, r18
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ec 0f       	add	r30, r28
 36c:	fd 1f       	adc	r31, r29
 36e:	e8 0f       	add	r30, r24
 370:	f1 1d       	adc	r31, r1
 372:	80 81       	ld	r24, Z
 374:	88 0f       	add	r24, r24
 376:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTC,7);
 378:	af 98       	cbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	e9 ef       	ldi	r30, 0xF9	; 249
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <segment_display+0x5c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <segment_display+0x62>
 384:	00 00       	nop
	
	_delay_ms(1);
	SET_BIT(PORTC,7);
 386:	af 9a       	sbi	0x15, 7	; 21
	PORTA = seg[n/10]<<1;   //tens
 388:	e1 e0       	ldi	r30, 0x01	; 1
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ec 0f       	add	r30, r28
 38e:	fd 1f       	adc	r31, r29
 390:	e9 0f       	add	r30, r25
 392:	f1 1d       	adc	r31, r1
 394:	80 81       	ld	r24, Z
 396:	88 0f       	add	r24, r24
 398:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTC,6);
 39a:	ae 98       	cbi	0x15, 6	; 21
 39c:	89 ef       	ldi	r24, 0xF9	; 249
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <segment_display+0x7e>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <segment_display+0x84>
 3a6:	00 00       	nop
	_delay_ms(1);
}
 3a8:	2a 96       	adiw	r28, 0x0a	; 10
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <open_gate1>:
void open_gate1(){
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
	
	 timer1_wave_fastPWM_B(0.999999);
 3be:	6f ee       	ldi	r22, 0xEF	; 239
 3c0:	7f ef       	ldi	r23, 0xFF	; 255
 3c2:	8f e7       	ldi	r24, 0x7F	; 127
 3c4:	9f e3       	ldi	r25, 0x3F	; 63
 3c6:	0e 94 1a 04 	call	0x834	; 0x834 <timer1_wave_fastPWM_B>
 3ca:	2f e9       	ldi	r18, 0x9F	; 159
 3cc:	86 e8       	ldi	r24, 0x86	; 134
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <open_gate1+0x16>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <open_gate1+0x20>
 3da:	00 00       	nop
	 _delay_ms(500);
	 timer1_wave_fastPWM_B(1.499999);
 3dc:	68 ef       	ldi	r22, 0xF8	; 248
 3de:	7f ef       	ldi	r23, 0xFF	; 255
 3e0:	8f eb       	ldi	r24, 0xBF	; 191
 3e2:	9f e3       	ldi	r25, 0x3F	; 63
 3e4:	0e 94 1a 04 	call	0x834	; 0x834 <timer1_wave_fastPWM_B>
	 counter++;
 3e8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	 free_slots = 99-counter;
 3f2:	93 e6       	ldi	r25, 0x63	; 99
 3f4:	98 1b       	sub	r25, r24
 3f6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	 //segment_display(free_slots);
	 LCD_movecursor(1,11);
 3fa:	6b e0       	ldi	r22, 0x0B	; 11
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_movecursor>
	 LCD_vSend_char(counter+48);
 402:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 406:	80 5d       	subi	r24, 0xD0	; 208
 408:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_vSend_char>
	 char d1 = free_slots/10;
 40c:	d0 91 60 00 	lds	r29, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	 char d0 = free_slots%10;
	 UART_vSendData('@');
 410:	80 e4       	ldi	r24, 0x40	; 64
 412:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	 UART_vSendData(d1+48);
 416:	cd ec       	ldi	r28, 0xCD	; 205
 418:	dc 9f       	mul	r29, r28
 41a:	c1 2d       	mov	r28, r1
 41c:	11 24       	eor	r1, r1
 41e:	c6 95       	lsr	r28
 420:	c6 95       	lsr	r28
 422:	c6 95       	lsr	r28
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	8c 0f       	add	r24, r28
 428:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	 UART_vSendData(d0+48);
 42c:	cc 0f       	add	r28, r28
 42e:	8c 2f       	mov	r24, r28
 430:	88 0f       	add	r24, r24
 432:	88 0f       	add	r24, r24
 434:	c8 0f       	add	r28, r24
 436:	8d 2f       	mov	r24, r29
 438:	8c 1b       	sub	r24, r28
 43a:	80 5d       	subi	r24, 0xD0	; 208
 43c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	 UART_vSendData('!');
 440:	81 e2       	ldi	r24, 0x21	; 33
 442:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <open_gate2>:
void open_gate2(){
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
	 timer1_wave_fastPWM_A(0.999999);
 450:	6f ee       	ldi	r22, 0xEF	; 239
 452:	7f ef       	ldi	r23, 0xFF	; 255
 454:	8f e7       	ldi	r24, 0x7F	; 127
 456:	9f e3       	ldi	r25, 0x3F	; 63
 458:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <timer1_wave_fastPWM_A>
 45c:	2f e9       	ldi	r18, 0x9F	; 159
 45e:	86 e8       	ldi	r24, 0x86	; 134
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <open_gate2+0x16>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <open_gate2+0x20>
 46c:	00 00       	nop
	 _delay_ms(500);
	 timer1_wave_fastPWM_A(1.499999);
 46e:	68 ef       	ldi	r22, 0xF8	; 248
 470:	7f ef       	ldi	r23, 0xFF	; 255
 472:	8f eb       	ldi	r24, 0xBF	; 191
 474:	9f e3       	ldi	r25, 0x3F	; 63
 476:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <timer1_wave_fastPWM_A>
	  counter--;
 47a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 47e:	81 50       	subi	r24, 0x01	; 1
 480:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	  free_slots = 99-counter;
 484:	93 e6       	ldi	r25, 0x63	; 99
 486:	98 1b       	sub	r25, r24
 488:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	  //segment_display(free_slots);
	  LCD_movecursor(1,11);
 48c:	6b e0       	ldi	r22, 0x0B	; 11
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_movecursor>
	  LCD_vSend_char(counter+48); 
 494:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_vSend_char>
	  char d1 = free_slots/10;
 49e:	d0 91 60 00 	lds	r29, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	  char d0 = free_slots%10;
	  UART_vSendData('@');
 4a2:	80 e4       	ldi	r24, 0x40	; 64
 4a4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	  UART_vSendData(d1+48);
 4a8:	cd ec       	ldi	r28, 0xCD	; 205
 4aa:	dc 9f       	mul	r29, r28
 4ac:	c1 2d       	mov	r28, r1
 4ae:	11 24       	eor	r1, r1
 4b0:	c6 95       	lsr	r28
 4b2:	c6 95       	lsr	r28
 4b4:	c6 95       	lsr	r28
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	8c 0f       	add	r24, r28
 4ba:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	  UART_vSendData(d0+48);
 4be:	cc 0f       	add	r28, r28
 4c0:	8c 2f       	mov	r24, r28
 4c2:	88 0f       	add	r24, r24
 4c4:	88 0f       	add	r24, r24
 4c6:	c8 0f       	add	r28, r24
 4c8:	8d 2f       	mov	r24, r29
 4ca:	8c 1b       	sub	r24, r28
 4cc:	80 5d       	subi	r24, 0xD0	; 208
 4ce:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	  UART_vSendData('!'); 
 4d2:	81 e2       	ldi	r24, 0x21	; 33
 4d4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <main>:
int main(void)
{   
	DDRA = 0xff;
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	8a bb       	out	0x1a, r24	; 26
	LCD_vInit();
 4e2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_vInit>
	UART_vInit(2400);
 4e6:	60 e6       	ldi	r22, 0x60	; 96
 4e8:	79 e0       	ldi	r23, 0x09	; 9
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 39 04 	call	0x872	; 0x872 <UART_vInit>
	sei();
 4f2:	78 94       	sei
	// PORTC PIN 6 , 7
	SET_BIT(DDRC,6);
 4f4:	a6 9a       	sbi	0x14, 6	; 20
	SET_BIT(DDRC,7);
 4f6:	a7 9a       	sbi	0x14, 7	; 20

	SET_BIT(DDRC,0);
 4f8:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC,1);
 4fa:	a1 9a       	sbi	0x14, 1	; 20
	
	LCD_vSend_string("there are 0 cars");
 4fc:	8b e6       	ldi	r24, 0x6B	; 107
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_vSend_string>
	LCD_movecursor(2,1);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_movecursor>
	LCD_vSend_string("garage has space");
 50c:	8c e7       	ldi	r24, 0x7C	; 124
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_vSend_string>

	char n1 = free_slots/10;
 514:	d0 91 60 00 	lds	r29, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	char n0 = free_slots%10;
	UART_vSendData('@');
 518:	80 e4       	ldi	r24, 0x40	; 64
 51a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	UART_vSendData(n1+48);
 51e:	cd ec       	ldi	r28, 0xCD	; 205
 520:	dc 9f       	mul	r29, r28
 522:	c1 2d       	mov	r28, r1
 524:	11 24       	eor	r1, r1
 526:	c6 95       	lsr	r28
 528:	c6 95       	lsr	r28
 52a:	c6 95       	lsr	r28
 52c:	80 e3       	ldi	r24, 0x30	; 48
 52e:	8c 0f       	add	r24, r28
 530:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	UART_vSendData(n0+48);
 534:	cc 0f       	add	r28, r28
 536:	8c 2f       	mov	r24, r28
 538:	88 0f       	add	r24, r24
 53a:	88 0f       	add	r24, r24
 53c:	c8 0f       	add	r28, r24
 53e:	8d 2f       	mov	r24, r29
 540:	8c 1b       	sub	r24, r28
 542:	80 5d       	subi	r24, 0xD0	; 208
 544:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
	UART_vSendData('!');
 548:	81 e2       	ldi	r24, 0x21	; 33
 54a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
		 if(IR1==1 && flag1==0 && counter<99)
		 {
			 
			 UART_vSendData('i');
			 
			 flag1=1;
 54e:	c1 e0       	ldi	r28, 0x01	; 1
	UART_vSendData('!');
	
    while(1)
    {
        
		 IR1=DIO_u8read('D',6);
 550:	66 e0       	ldi	r22, 0x06	; 6
 552:	84 e4       	ldi	r24, 0x44	; 68
 554:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
 558:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <IR1>
		 if(IR1==1 && flag1==0 && counter<99)
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	71 f4       	brne	.+28     	; 0x57c <main+0x9e>
 560:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <flag1>
 564:	81 11       	cpse	r24, r1
 566:	0e c0       	rjmp	.+28     	; 0x584 <main+0xa6>
 568:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 56c:	83 36       	cpi	r24, 0x63	; 99
 56e:	50 f4       	brcc	.+20     	; 0x584 <main+0xa6>
		 {
			 
			 UART_vSendData('i');
 570:	89 e6       	ldi	r24, 0x69	; 105
 572:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
			 
			 flag1=1;
 576:	c0 93 90 00 	sts	0x0090, r28	; 0x800090 <flag1>
 57a:	04 c0       	rjmp	.+8      	; 0x584 <main+0xa6>
		
			 
		 }
		 else if(IR1==0)
 57c:	81 11       	cpse	r24, r1
 57e:	02 c0       	rjmp	.+4      	; 0x584 <main+0xa6>
		 {
			 flag1=0;
 580:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <flag1>
		 }
		 
		 IR2=DIO_u8read('D',7);
 584:	67 e0       	ldi	r22, 0x07	; 7
 586:	84 e4       	ldi	r24, 0x44	; 68
 588:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
 58c:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <IR2>
		 if(IR2==1 && flag2==0 && counter>0)
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	71 f4       	brne	.+28     	; 0x5b0 <main+0xd2>
 594:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <flag2>
 598:	81 11       	cpse	r24, r1
 59a:	0e c0       	rjmp	.+28     	; 0x5b8 <main+0xda>
 59c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
 5a0:	88 23       	and	r24, r24
 5a2:	51 f0       	breq	.+20     	; 0x5b8 <main+0xda>
		 {
			
			 UART_vSendData('o');
 5a4:	8f e6       	ldi	r24, 0x6F	; 111
 5a6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <UART_vSendData>
			 flag2=1;
 5aa:	c0 93 8f 00 	sts	0x008F, r28	; 0x80008f <flag2>
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <main+0xda>

		 }
		 else if(IR2==0)
 5b0:	81 11       	cpse	r24, r1
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <main+0xda>
		 {
			 flag2=0;
 5b4:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <flag2>
		 }
		 segment_display(free_slots);
 5b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5bc:	0e 94 91 01 	call	0x322	; 0x322 <segment_display>
    }
 5c0:	c7 cf       	rjmp	.-114    	; 0x550 <main+0x72>

000005c2 <__vector_13>:
	
	return 0;
}

ISR(USART_RXC_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	
	x=UDR;
 5e4:	8c b1       	in	r24, 0x0c	; 12
 5e6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <x>
	
	if(x=='1'){
 5ea:	81 33       	cpi	r24, 0x31	; 49
 5ec:	19 f4       	brne	.+6      	; 0x5f4 <__vector_13+0x32>
		open_gate1();
 5ee:	0e 94 dd 01 	call	0x3ba	; 0x3ba <open_gate1>
 5f2:	20 c0       	rjmp	.+64     	; 0x634 <__vector_13+0x72>
	}
	else if(x=='2'){
 5f4:	82 33       	cpi	r24, 0x32	; 50
 5f6:	19 f4       	brne	.+6      	; 0x5fe <__vector_13+0x3c>
		open_gate2();
 5f8:	0e 94 26 02 	call	0x44c	; 0x44c <open_gate2>
 5fc:	1b c0       	rjmp	.+54     	; 0x634 <__vector_13+0x72>
	}
	else if (x == '3'){
 5fe:	83 33       	cpi	r24, 0x33	; 51
 600:	61 f4       	brne	.+24     	; 0x61a <__vector_13+0x58>
		SET_BIT(PORTC,1);
 602:	a9 9a       	sbi	0x15, 1	; 21
 604:	2f e7       	ldi	r18, 0x7F	; 127
 606:	8a e1       	ldi	r24, 0x1A	; 26
 608:	96 e0       	ldi	r25, 0x06	; 6
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <__vector_13+0x48>
 612:	00 c0       	rjmp	.+0      	; 0x614 <__vector_13+0x52>
 614:	00 00       	nop
		_delay_ms(2000);
		CLR_BIT(PORTC,1);
 616:	a9 98       	cbi	0x15, 1	; 21
 618:	0d c0       	rjmp	.+26     	; 0x634 <__vector_13+0x72>
	}
	else if (x == '4'){
 61a:	84 33       	cpi	r24, 0x34	; 52
 61c:	59 f4       	brne	.+22     	; 0x634 <__vector_13+0x72>
		SET_BIT(PORTC,0);
 61e:	a8 9a       	sbi	0x15, 0	; 21
 620:	2f e7       	ldi	r18, 0x7F	; 127
 622:	8a e1       	ldi	r24, 0x1A	; 26
 624:	96 e0       	ldi	r25, 0x06	; 6
 626:	21 50       	subi	r18, 0x01	; 1
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <__vector_13+0x64>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <__vector_13+0x6e>
 630:	00 00       	nop
		_delay_ms(2000);
		CLR_BIT(PORTC,0);
 632:	a8 98       	cbi	0x15, 0	; 21
	}
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <send_falling_edge>:
 656:	41 e0       	ldi	r20, 0x01	; 1
 658:	62 e0       	ldi	r22, 0x02	; 2
 65a:	83 e4       	ldi	r24, 0x43	; 67
 65c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 660:	83 ef       	ldi	r24, 0xF3	; 243
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	f1 f7       	brne	.-4      	; 0x664 <send_falling_edge+0xe>
 668:	00 c0       	rjmp	.+0      	; 0x66a <send_falling_edge+0x14>
 66a:	00 00       	nop
 66c:	40 e0       	ldi	r20, 0x00	; 0
 66e:	62 e0       	ldi	r22, 0x02	; 2
 670:	83 e4       	ldi	r24, 0x43	; 67
 672:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 676:	83 ef       	ldi	r24, 0xF3	; 243
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <send_falling_edge+0x24>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <send_falling_edge+0x2a>
 680:	00 00       	nop
 682:	08 95       	ret

00000684 <LCD_vSend_cmd>:
 684:	68 2f       	mov	r22, r24
 686:	82 e4       	ldi	r24, 0x42	; 66
 688:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_write_port>
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	63 e0       	ldi	r22, 0x03	; 3
 690:	83 e4       	ldi	r24, 0x43	; 67
 692:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 696:	0e 94 2b 03 	call	0x656	; 0x656 <send_falling_edge>
 69a:	89 ef       	ldi	r24, 0xF9	; 249
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <LCD_vSend_cmd+0x1a>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <LCD_vSend_cmd+0x20>
 6a4:	00 00       	nop
 6a6:	08 95       	ret

000006a8 <LCD_vInit>:
 6a8:	8f e4       	ldi	r24, 0x4F	; 79
 6aa:	93 ec       	ldi	r25, 0xC3	; 195
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_vInit+0x4>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_vInit+0xa>
 6b2:	00 00       	nop
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	82 e4       	ldi	r24, 0x42	; 66
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	82 e4       	ldi	r24, 0x42	; 66
 6c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6c8:	41 e0       	ldi	r20, 0x01	; 1
 6ca:	62 e0       	ldi	r22, 0x02	; 2
 6cc:	82 e4       	ldi	r24, 0x42	; 66
 6ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6d2:	41 e0       	ldi	r20, 0x01	; 1
 6d4:	63 e0       	ldi	r22, 0x03	; 3
 6d6:	82 e4       	ldi	r24, 0x42	; 66
 6d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6dc:	41 e0       	ldi	r20, 0x01	; 1
 6de:	64 e0       	ldi	r22, 0x04	; 4
 6e0:	82 e4       	ldi	r24, 0x42	; 66
 6e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	65 e0       	ldi	r22, 0x05	; 5
 6ea:	82 e4       	ldi	r24, 0x42	; 66
 6ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	66 e0       	ldi	r22, 0x06	; 6
 6f4:	82 e4       	ldi	r24, 0x42	; 66
 6f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	67 e0       	ldi	r22, 0x07	; 7
 6fe:	82 e4       	ldi	r24, 0x42	; 66
 700:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 704:	41 e0       	ldi	r20, 0x01	; 1
 706:	62 e0       	ldi	r22, 0x02	; 2
 708:	83 e4       	ldi	r24, 0x43	; 67
 70a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	64 e0       	ldi	r22, 0x04	; 4
 712:	83 e4       	ldi	r24, 0x43	; 67
 714:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 718:	41 e0       	ldi	r20, 0x01	; 1
 71a:	63 e0       	ldi	r22, 0x03	; 3
 71c:	83 e4       	ldi	r24, 0x43	; 67
 71e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	64 e0       	ldi	r22, 0x04	; 4
 726:	83 e4       	ldi	r24, 0x43	; 67
 728:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 72c:	88 e3       	ldi	r24, 0x38	; 56
 72e:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vSend_cmd>
 732:	89 ef       	ldi	r24, 0xF9	; 249
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <LCD_vInit+0x8e>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_vInit+0x94>
 73c:	00 00       	nop
 73e:	8e e0       	ldi	r24, 0x0E	; 14
 740:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vSend_cmd>
 744:	89 ef       	ldi	r24, 0xF9	; 249
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <LCD_vInit+0xa0>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <LCD_vInit+0xa6>
 74e:	00 00       	nop
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vSend_cmd>
 756:	83 ec       	ldi	r24, 0xC3	; 195
 758:	99 e0       	ldi	r25, 0x09	; 9
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <LCD_vInit+0xb2>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <LCD_vInit+0xb8>
 760:	00 00       	nop
 762:	86 e0       	ldi	r24, 0x06	; 6
 764:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vSend_cmd>
 768:	89 ef       	ldi	r24, 0xF9	; 249
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <LCD_vInit+0xc4>
 770:	00 c0       	rjmp	.+0      	; 0x772 <LCD_vInit+0xca>
 772:	00 00       	nop
 774:	08 95       	ret

00000776 <LCD_vSend_char>:
 776:	68 2f       	mov	r22, r24
 778:	82 e4       	ldi	r24, 0x42	; 66
 77a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_write_port>
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	63 e0       	ldi	r22, 0x03	; 3
 782:	83 e4       	ldi	r24, 0x43	; 67
 784:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 788:	0e 94 2b 03 	call	0x656	; 0x656 <send_falling_edge>
 78c:	89 ef       	ldi	r24, 0xF9	; 249
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <LCD_vSend_char+0x1a>
 794:	00 c0       	rjmp	.+0      	; 0x796 <LCD_vSend_char+0x20>
 796:	00 00       	nop
 798:	08 95       	ret

0000079a <LCD_vSend_string>:
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	ec 01       	movw	r28, r24
 7a0:	88 81       	ld	r24, Y
 7a2:	88 23       	and	r24, r24
 7a4:	31 f0       	breq	.+12     	; 0x7b2 <LCD_vSend_string+0x18>
 7a6:	21 96       	adiw	r28, 0x01	; 1
 7a8:	0e 94 bb 03 	call	0x776	; 0x776 <LCD_vSend_char>
 7ac:	89 91       	ld	r24, Y+
 7ae:	81 11       	cpse	r24, r1
 7b0:	fb cf       	rjmp	.-10     	; 0x7a8 <LCD_vSend_string+0xe>
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 7b8:	9f ef       	ldi	r25, 0xFF	; 255
 7ba:	98 0f       	add	r25, r24
 7bc:	92 30       	cpi	r25, 0x02	; 2
 7be:	70 f4       	brcc	.+28     	; 0x7dc <LCD_movecursor+0x24>
 7c0:	9f ef       	ldi	r25, 0xFF	; 255
 7c2:	96 0f       	add	r25, r22
 7c4:	90 31       	cpi	r25, 0x10	; 16
 7c6:	60 f4       	brcc	.+24     	; 0x7e0 <LCD_movecursor+0x28>
	{
		data=0x80;
	}
	else if(row==1)
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	19 f4       	brne	.+6      	; 0x7d2 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 7cc:	2f e7       	ldi	r18, 0x7F	; 127
 7ce:	26 0f       	add	r18, r22
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <LCD_movecursor+0x2a>
	}
	else if (row==2)
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	31 f4       	brne	.+12     	; 0x7e2 <LCD_movecursor+0x2a>
	{
		data=0xc0+coloumn-1;
 7d6:	2f eb       	ldi	r18, 0xBF	; 191
 7d8:	26 0f       	add	r18, r22
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <LCD_movecursor+0x2a>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 7dc:	20 e8       	ldi	r18, 0x80	; 128
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <LCD_movecursor+0x2a>
 7e0:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 7e2:	82 2f       	mov	r24, r18
 7e4:	0e 94 42 03 	call	0x684	; 0x684 <LCD_vSend_cmd>
 7e8:	89 ef       	ldi	r24, 0xF9	; 249
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCD_movecursor+0x34>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <LCD_movecursor+0x3a>
 7f2:	00 00       	nop
 7f4:	08 95       	ret

000007f6 <timer1_wave_fastPWM_A>:
}

void timer1_wave_fastPWM_A(double value)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 7f6:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 7f8:	2f b5       	in	r18, 0x2f	; 47
 7fa:	22 60       	ori	r18, 0x02	; 2
 7fc:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 7fe:	2e b5       	in	r18, 0x2e	; 46
 800:	28 60       	ori	r18, 0x08	; 8
 802:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 804:	2e b5       	in	r18, 0x2e	; 46
 806:	20 61       	ori	r18, 0x10	; 16
 808:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	4a e7       	ldi	r20, 0x7A	; 122
 810:	54 e4       	ldi	r21, 0x44	; 68
 812:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 816:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fixunssfsi>
 81a:	7b bd       	out	0x2b, r23	; 43
 81c:	6a bd       	out	0x2a, r22	; 42
	ICR1=19999;
 81e:	8f e1       	ldi	r24, 0x1F	; 31
 820:	9e e4       	ldi	r25, 0x4E	; 78
 822:	97 bd       	out	0x27, r25	; 39
 824:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 826:	8e b5       	in	r24, 0x2e	; 46
 828:	81 60       	ori	r24, 0x01	; 1
 82a:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 82c:	8f b5       	in	r24, 0x2f	; 47
 82e:	80 68       	ori	r24, 0x80	; 128
 830:	8f bd       	out	0x2f, r24	; 47
 832:	08 95       	ret

00000834 <timer1_wave_fastPWM_B>:
}
void timer1_wave_fastPWM_B(double value)
{
	/* set OC1B as output pin */
	SET_BIT(DDRD,4);
 834:	8c 9a       	sbi	0x11, 4	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 836:	2f b5       	in	r18, 0x2f	; 47
 838:	22 60       	ori	r18, 0x02	; 2
 83a:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 83c:	2e b5       	in	r18, 0x2e	; 46
 83e:	28 60       	ori	r18, 0x08	; 8
 840:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 842:	2e b5       	in	r18, 0x2e	; 46
 844:	20 61       	ori	r18, 0x10	; 16
 846:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1B,ICR1 */
	OCR1B=value*1000;
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	4a e7       	ldi	r20, 0x7A	; 122
 84e:	54 e4       	ldi	r21, 0x44	; 68
 850:	0e 94 b9 04 	call	0x972	; 0x972 <__mulsf3>
 854:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fixunssfsi>
 858:	79 bd       	out	0x29, r23	; 41
 85a:	68 bd       	out	0x28, r22	; 40
	ICR1=19999;
 85c:	8f e1       	ldi	r24, 0x1F	; 31
 85e:	9e e4       	ldi	r25, 0x4E	; 78
 860:	97 bd       	out	0x27, r25	; 39
 862:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 864:	8e b5       	in	r24, 0x2e	; 46
 866:	81 60       	ori	r24, 0x01	; 1
 868:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1B on compare match, set OC1B at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1B1);
 86a:	8f b5       	in	r24, 0x2f	; 47
 86c:	80 62       	ori	r24, 0x20	; 32
 86e:	8f bd       	out	0x2f, r24	; 47
 870:	08 95       	ret

00000872 <UART_vInit>:

void UART_vInit(unsigned long baud)
{
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
 872:	dc 01       	movw	r26, r24
 874:	cb 01       	movw	r24, r22
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	aa 1f       	adc	r26, r26
 87c:	bb 1f       	adc	r27, r27
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	aa 1f       	adc	r26, r26
 884:	bb 1f       	adc	r27, r27
 886:	9c 01       	movw	r18, r24
 888:	ad 01       	movw	r20, r26
 88a:	22 0f       	add	r18, r18
 88c:	33 1f       	adc	r19, r19
 88e:	44 1f       	adc	r20, r20
 890:	55 1f       	adc	r21, r21
 892:	22 0f       	add	r18, r18
 894:	33 1f       	adc	r19, r19
 896:	44 1f       	adc	r20, r20
 898:	55 1f       	adc	r21, r21
 89a:	60 e4       	ldi	r22, 0x40	; 64
 89c:	72 e4       	ldi	r23, 0x42	; 66
 89e:	8f e0       	ldi	r24, 0x0F	; 15
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__udivmodsi4>
 8a6:	21 50       	subi	r18, 0x01	; 1
 8a8:	31 09       	sbc	r19, r1
	UBRRH=(unsigned char)(UBRR>>8);
 8aa:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)UBRR;
 8ac:	29 b9       	out	0x09, r18	; 9
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
 8ae:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
 8b0:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UCSRB,RXCIE);
 8b2:	57 9a       	sbi	0x0a, 7	; 10
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 8b4:	86 e8       	ldi	r24, 0x86	; 134
 8b6:	80 bd       	out	0x20, r24	; 32
 8b8:	08 95       	ret

000008ba <UART_vSendData>:
}

void UART_vSendData(char data)
{
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
 8ba:	5d 9b       	sbis	0x0b, 5	; 11
 8bc:	fe cf       	rjmp	.-4      	; 0x8ba <UART_vSendData>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
 8be:	8c b9       	out	0x0c, r24	; 12
 8c0:	08 95       	ret

000008c2 <__fixunssfsi>:
 8c2:	0e 94 98 04 	call	0x930	; 0x930 <__fp_splitA>
 8c6:	88 f0       	brcs	.+34     	; 0x8ea <__fixunssfsi+0x28>
 8c8:	9f 57       	subi	r25, 0x7F	; 127
 8ca:	98 f0       	brcs	.+38     	; 0x8f2 <__fixunssfsi+0x30>
 8cc:	b9 2f       	mov	r27, r25
 8ce:	99 27       	eor	r25, r25
 8d0:	b7 51       	subi	r27, 0x17	; 23
 8d2:	b0 f0       	brcs	.+44     	; 0x900 <__fixunssfsi+0x3e>
 8d4:	e1 f0       	breq	.+56     	; 0x90e <__fixunssfsi+0x4c>
 8d6:	66 0f       	add	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	1a f0       	brmi	.+6      	; 0x8e6 <__fixunssfsi+0x24>
 8e0:	ba 95       	dec	r27
 8e2:	c9 f7       	brne	.-14     	; 0x8d6 <__fixunssfsi+0x14>
 8e4:	14 c0       	rjmp	.+40     	; 0x90e <__fixunssfsi+0x4c>
 8e6:	b1 30       	cpi	r27, 0x01	; 1
 8e8:	91 f0       	breq	.+36     	; 0x90e <__fixunssfsi+0x4c>
 8ea:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_zero>
 8ee:	b1 e0       	ldi	r27, 0x01	; 1
 8f0:	08 95       	ret
 8f2:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_zero>
 8f6:	67 2f       	mov	r22, r23
 8f8:	78 2f       	mov	r23, r24
 8fa:	88 27       	eor	r24, r24
 8fc:	b8 5f       	subi	r27, 0xF8	; 248
 8fe:	39 f0       	breq	.+14     	; 0x90e <__fixunssfsi+0x4c>
 900:	b9 3f       	cpi	r27, 0xF9	; 249
 902:	cc f3       	brlt	.-14     	; 0x8f6 <__fixunssfsi+0x34>
 904:	86 95       	lsr	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b3 95       	inc	r27
 90c:	d9 f7       	brne	.-10     	; 0x904 <__fixunssfsi+0x42>
 90e:	3e f4       	brtc	.+14     	; 0x91e <__fixunssfsi+0x5c>
 910:	90 95       	com	r25
 912:	80 95       	com	r24
 914:	70 95       	com	r23
 916:	61 95       	neg	r22
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__fp_split3>:
 920:	57 fd       	sbrc	r21, 7
 922:	90 58       	subi	r25, 0x80	; 128
 924:	44 0f       	add	r20, r20
 926:	55 1f       	adc	r21, r21
 928:	59 f0       	breq	.+22     	; 0x940 <__fp_splitA+0x10>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	71 f0       	breq	.+28     	; 0x94a <__fp_splitA+0x1a>
 92e:	47 95       	ror	r20

00000930 <__fp_splitA>:
 930:	88 0f       	add	r24, r24
 932:	97 fb       	bst	r25, 7
 934:	99 1f       	adc	r25, r25
 936:	61 f0       	breq	.+24     	; 0x950 <__fp_splitA+0x20>
 938:	9f 3f       	cpi	r25, 0xFF	; 255
 93a:	79 f0       	breq	.+30     	; 0x95a <__fp_splitA+0x2a>
 93c:	87 95       	ror	r24
 93e:	08 95       	ret
 940:	12 16       	cp	r1, r18
 942:	13 06       	cpc	r1, r19
 944:	14 06       	cpc	r1, r20
 946:	55 1f       	adc	r21, r21
 948:	f2 cf       	rjmp	.-28     	; 0x92e <__fp_split3+0xe>
 94a:	46 95       	lsr	r20
 94c:	f1 df       	rcall	.-30     	; 0x930 <__fp_splitA>
 94e:	08 c0       	rjmp	.+16     	; 0x960 <__fp_splitA+0x30>
 950:	16 16       	cp	r1, r22
 952:	17 06       	cpc	r1, r23
 954:	18 06       	cpc	r1, r24
 956:	99 1f       	adc	r25, r25
 958:	f1 cf       	rjmp	.-30     	; 0x93c <__fp_splitA+0xc>
 95a:	86 95       	lsr	r24
 95c:	71 05       	cpc	r23, r1
 95e:	61 05       	cpc	r22, r1
 960:	08 94       	sec
 962:	08 95       	ret

00000964 <__fp_zero>:
 964:	e8 94       	clt

00000966 <__fp_szero>:
 966:	bb 27       	eor	r27, r27
 968:	66 27       	eor	r22, r22
 96a:	77 27       	eor	r23, r23
 96c:	cb 01       	movw	r24, r22
 96e:	97 f9       	bld	r25, 7
 970:	08 95       	ret

00000972 <__mulsf3>:
 972:	0e 94 cc 04 	call	0x998	; 0x998 <__mulsf3x>
 976:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_round>
 97a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_pscA>
 97e:	38 f0       	brcs	.+14     	; 0x98e <__mulsf3+0x1c>
 980:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_pscB>
 984:	20 f0       	brcs	.+8      	; 0x98e <__mulsf3+0x1c>
 986:	95 23       	and	r25, r21
 988:	11 f0       	breq	.+4      	; 0x98e <__mulsf3+0x1c>
 98a:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_inf>
 98e:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__fp_nan>
 992:	11 24       	eor	r1, r1
 994:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_szero>

00000998 <__mulsf3x>:
 998:	0e 94 90 04 	call	0x920	; 0x920 <__fp_split3>
 99c:	70 f3       	brcs	.-36     	; 0x97a <__mulsf3+0x8>

0000099e <__mulsf3_pse>:
 99e:	95 9f       	mul	r25, r21
 9a0:	c1 f3       	breq	.-16     	; 0x992 <__mulsf3+0x20>
 9a2:	95 0f       	add	r25, r21
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	55 1f       	adc	r21, r21
 9a8:	62 9f       	mul	r22, r18
 9aa:	f0 01       	movw	r30, r0
 9ac:	72 9f       	mul	r23, r18
 9ae:	bb 27       	eor	r27, r27
 9b0:	f0 0d       	add	r31, r0
 9b2:	b1 1d       	adc	r27, r1
 9b4:	63 9f       	mul	r22, r19
 9b6:	aa 27       	eor	r26, r26
 9b8:	f0 0d       	add	r31, r0
 9ba:	b1 1d       	adc	r27, r1
 9bc:	aa 1f       	adc	r26, r26
 9be:	64 9f       	mul	r22, r20
 9c0:	66 27       	eor	r22, r22
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	66 1f       	adc	r22, r22
 9c8:	82 9f       	mul	r24, r18
 9ca:	22 27       	eor	r18, r18
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 9f       	mul	r23, r19
 9d4:	b0 0d       	add	r27, r0
 9d6:	a1 1d       	adc	r26, r1
 9d8:	62 1f       	adc	r22, r18
 9da:	83 9f       	mul	r24, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	22 1f       	adc	r18, r18
 9e2:	74 9f       	mul	r23, r20
 9e4:	33 27       	eor	r19, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	23 1f       	adc	r18, r19
 9ec:	84 9f       	mul	r24, r20
 9ee:	60 0d       	add	r22, r0
 9f0:	21 1d       	adc	r18, r1
 9f2:	82 2f       	mov	r24, r18
 9f4:	76 2f       	mov	r23, r22
 9f6:	6a 2f       	mov	r22, r26
 9f8:	11 24       	eor	r1, r1
 9fa:	9f 57       	subi	r25, 0x7F	; 127
 9fc:	50 40       	sbci	r21, 0x00	; 0
 9fe:	9a f0       	brmi	.+38     	; 0xa26 <__mulsf3_pse+0x88>
 a00:	f1 f0       	breq	.+60     	; 0xa3e <__mulsf3_pse+0xa0>
 a02:	88 23       	and	r24, r24
 a04:	4a f0       	brmi	.+18     	; 0xa18 <__mulsf3_pse+0x7a>
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	bb 1f       	adc	r27, r27
 a0c:	66 1f       	adc	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	50 40       	sbci	r21, 0x00	; 0
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__mulsf3_pse+0x64>
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	51 05       	cpc	r21, r1
 a1c:	80 f0       	brcs	.+32     	; 0xa3e <__mulsf3_pse+0xa0>
 a1e:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_inf>
 a22:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_szero>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	e4 f3       	brlt	.-8      	; 0xa22 <__mulsf3_pse+0x84>
 a2a:	98 3e       	cpi	r25, 0xE8	; 232
 a2c:	d4 f3       	brlt	.-12     	; 0xa22 <__mulsf3_pse+0x84>
 a2e:	86 95       	lsr	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b7 95       	ror	r27
 a36:	f7 95       	ror	r31
 a38:	e7 95       	ror	r30
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	c1 f7       	brne	.-16     	; 0xa2e <__mulsf3_pse+0x90>
 a3e:	fe 2b       	or	r31, r30
 a40:	88 0f       	add	r24, r24
 a42:	91 1d       	adc	r25, r1
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <__fp_inf>:
 a4c:	97 f9       	bld	r25, 7
 a4e:	9f 67       	ori	r25, 0x7F	; 127
 a50:	80 e8       	ldi	r24, 0x80	; 128
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	60 e0       	ldi	r22, 0x00	; 0
 a56:	08 95       	ret

00000a58 <__fp_nan>:
 a58:	9f ef       	ldi	r25, 0xFF	; 255
 a5a:	80 ec       	ldi	r24, 0xC0	; 192
 a5c:	08 95       	ret

00000a5e <__fp_pscA>:
 a5e:	00 24       	eor	r0, r0
 a60:	0a 94       	dec	r0
 a62:	16 16       	cp	r1, r22
 a64:	17 06       	cpc	r1, r23
 a66:	18 06       	cpc	r1, r24
 a68:	09 06       	cpc	r0, r25
 a6a:	08 95       	ret

00000a6c <__fp_pscB>:
 a6c:	00 24       	eor	r0, r0
 a6e:	0a 94       	dec	r0
 a70:	12 16       	cp	r1, r18
 a72:	13 06       	cpc	r1, r19
 a74:	14 06       	cpc	r1, r20
 a76:	05 06       	cpc	r0, r21
 a78:	08 95       	ret

00000a7a <__fp_round>:
 a7a:	09 2e       	mov	r0, r25
 a7c:	03 94       	inc	r0
 a7e:	00 0c       	add	r0, r0
 a80:	11 f4       	brne	.+4      	; 0xa86 <__fp_round+0xc>
 a82:	88 23       	and	r24, r24
 a84:	52 f0       	brmi	.+20     	; 0xa9a <__fp_round+0x20>
 a86:	bb 0f       	add	r27, r27
 a88:	40 f4       	brcc	.+16     	; 0xa9a <__fp_round+0x20>
 a8a:	bf 2b       	or	r27, r31
 a8c:	11 f4       	brne	.+4      	; 0xa92 <__fp_round+0x18>
 a8e:	60 ff       	sbrs	r22, 0
 a90:	04 c0       	rjmp	.+8      	; 0xa9a <__fp_round+0x20>
 a92:	6f 5f       	subi	r22, 0xFF	; 255
 a94:	7f 4f       	sbci	r23, 0xFF	; 255
 a96:	8f 4f       	sbci	r24, 0xFF	; 255
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	08 95       	ret

00000a9c <__udivmodsi4>:
 a9c:	a1 e2       	ldi	r26, 0x21	; 33
 a9e:	1a 2e       	mov	r1, r26
 aa0:	aa 1b       	sub	r26, r26
 aa2:	bb 1b       	sub	r27, r27
 aa4:	fd 01       	movw	r30, r26
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <__udivmodsi4_ep>

00000aa8 <__udivmodsi4_loop>:
 aa8:	aa 1f       	adc	r26, r26
 aaa:	bb 1f       	adc	r27, r27
 aac:	ee 1f       	adc	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	a2 17       	cp	r26, r18
 ab2:	b3 07       	cpc	r27, r19
 ab4:	e4 07       	cpc	r30, r20
 ab6:	f5 07       	cpc	r31, r21
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__udivmodsi4_ep>
 aba:	a2 1b       	sub	r26, r18
 abc:	b3 0b       	sbc	r27, r19
 abe:	e4 0b       	sbc	r30, r20
 ac0:	f5 0b       	sbc	r31, r21

00000ac2 <__udivmodsi4_ep>:
 ac2:	66 1f       	adc	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	1a 94       	dec	r1
 acc:	69 f7       	brne	.-38     	; 0xaa8 <__udivmodsi4_loop>
 ace:	60 95       	com	r22
 ad0:	70 95       	com	r23
 ad2:	80 95       	com	r24
 ad4:	90 95       	com	r25
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	bd 01       	movw	r22, r26
 adc:	cf 01       	movw	r24, r30
 ade:	08 95       	ret

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
